#!/usr/bin/python
import logging
import os
import sys

from functools import partial

from mininet.cli import CLI
from mininet.log import setLogLevel
from mininet.net import Mininet
from mininet.node import Host, RemoteController
from mininet.topo import Topo
from mininet.util import dumpNodeConnections


HOST_TO_USER = {
    "h1": "dev1",
    "h2": "dev2",
    "h3": "dev3",
    "h4": "dev_srv1",
    "h5": "dev_srv2",
    "h6": "dev_srv3",
    "h7": "sal1",
    "h8": "sal2",
    "h9": "sal3",
    "h10": "sal_srv1",
    "h11": "sal_srv2",
    "h12": "hr1",
    "h13": "hr2",
    "h14": "hr3",
    "h15": "hr_srv1",
    "h16": "hr_srv2",
    "h17": "ga1",
    "h18": "ga2",
    "h19": "ga3",
    "h20": "ga_srv1"
}


class ExampleCorpTopo(Topo):
    def build(self):
        # Core switch (s1) and edge switches (s2-s5)
        s1 = self.addSwitch("s1")
        s2 = self.addSwitch("s2")
        s3 = self.addSwitch("s3")
        s4 = self.addSwitch("s4")
        s5 = self.addSwitch("s5")

        self.addLink(s1, s2)
        self.addLink(s1, s3)
        self.addLink(s1, s4)
        self.addLink(s1, s5)

        # Development departmenet
        h1 = self.addHost("h1")
        self.addLink(h1, s2)
        h2 = self.addHost("h2")
        self.addLink(h2, s2)
        h3 = self.addHost("h3")
        self.addLink(h3, s2)
        h4 = self.addHost("h4")
        self.addLink(h4, s2)
        h5 = self.addHost("h5")
        self.addLink(h5, s2)
        h6 = self.addHost("h6")
        self.addLink(h6, s2)

        # Sales Departmenet
        h7 = self.addHost("h7")
        self.addLink(h7, s3)
        h8 = self.addHost("h8")
        self.addLink(h8, s3)
        h9 = self.addHost("h9")
        self.addLink(h9, s3)
        h10 = self.addHost("h10")
        self.addLink(h10, s3)
        h11 = self.addHost("h11")
        self.addLink(h11, s3)

        # Human Resources Departmenet
        h12 = self.addHost("h12")
        self.addLink(h12, s4)
        h13 = self.addHost("h13")
        self.addLink(h13, s4)
        h14 = self.addHost("h14")
        self.addLink(h14, s4)
        h15 = self.addHost("h15")
        self.addLink(h15, s4)
        h16 = self.addHost("h16")
        self.addLink(h16, s4)

        # General Affairs Departmenet
        h17 = self.addHost("h17")
        self.addLink(h17, s5)
        h18 = self.addHost("h18")
        self.addLink(h18, s5)
        h19 = self.addHost("h19")
        self.addLink(h19, s5)
        h20 = self.addHost("h20")
        self.addLink(h20, s5)


def launch_network():
    "Create and test a simple network"
    topo = ExampleCorpTopo()
    private_dirs = ["/tmp", "/etc/wpa_supplicant", "/var/log", "/var/run"]
    host = partial(Host, privateDirs=private_dirs)
    net = Mininet(topo=topo, host=host, controller=RemoteController)
    net.start()

    sys.path.append(
        os.path.abspath(
            os.path.join(
                os.path.abspath(os.path.dirname(__file__)), "..")))
    from flowsieve.user_store import UserStore
    logging.basicConfig()
    users = UserStore().users

    for host in net.hosts:
        user = users[HOST_TO_USER[host.name]]

        conf = """
        ap_scan=0
        eapol_version=2
        network={
           key_mgmt=IEEE8021X
           eap=MD5
           identity="%s"
           password="%s"
           eapol_flags=0
        }
        """ % (user.name, user.password)

        host.cmd("echo '%s' > /etc/wpa_supplicant/wpa_supplicant.conf" % conf)

        if_name = host.name + "-eth0"
        host.cmdPrint("wpa_supplicant -B -Dwired -i%s"
                      " -c/etc/wpa_supplicant/wpa_supplicant.conf" % if_name)

    print "Dumping host connections"
    dumpNodeConnections(net.hosts)

    CLI(net)

    # Run "px net.pingAll(timeout=1)" in CLI to test connectivity

    for host in net.hosts:
        host.cmd("killall wpa_supplicant")
    net.stop()


if __name__ == "__main__":
    setLogLevel("info")
    launch_network()
